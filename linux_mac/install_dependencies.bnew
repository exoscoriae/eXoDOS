#!/usr/bin/env bash

# Linux Dependency Setup For eXo Collections
# Revised: 2024-07-31

#--------------------------------------------------------------------------------------
clear

setupversion="Version 6.03.universal1"

[[ $0 == $BASH_SOURCE ]] && cd "$( dirname "$0")"
scriptDir="$(cd "$( dirname "$BASH_SOURCE")" && pwd)"
[ $# -gt 0 ] && parameterone="$1"
[ $# -gt 1 ] && parametertwo="$2"
[ $# -gt 2 ] && parameterthree="$3"
[ $# -gt 3 ] && parameterfour="$4"

if [[ "$OSTYPE" == "darwin"* ]]
then
    source "$scriptDir/../../$(basename -- "${BASH_SOURCE%.bsh}.command")"
    exit 0
fi

cd ../..

if [ ! -d Content ]
then
    printf "\n\e[1;31;47mCannot find ./Content subdirectory.\e[0m\n\n"
    read -s -n 1 -p "Press any key to abort."
    printf "\n\n"
    exit 1
fi
if [ ! -d "eXo/util" ]
then
    printf "\n\e[1;31;47mCannot find ./eXo/util subdirectory.\e[0m\n\n"
    read -s -n 1 -p "Press any key to abort."
    printf "\n\n"
    exit 1
fi
if [[ $(ls -1 eXo/util/util*linux*.zip 2>/dev/null | wc -l) == 0 ]]
then
    printf "\n\e[1;31;47mCannot find ./eXo/util/util*linux*.zip.\e[0m\n\n"
    read -s -n 1 -p "Press any key to abort."
    printf "\n\n"
    exit 1
fi

initialDir=$PWD

function beginLinux
{
    missingPackages=no
    runupdate=no
    distroeol=no
    distroid="$(cat /etc/os-release 2>/dev/null | grep '^ID=' | sed -e 's/^ID=//')"
    distroversion="$(cat /etc/os-release 2>/dev/null | grep '^VERSION_ID=' | sed -e 's/^VERSION_ID=//' | sed -e 's/"//g')"
    distrolike="$(cat /etc/os-release 2>/dev/null | grep '^ID_LIKE=' | sed -e 's/^ID_LIKE=//')"
    
    clear
    printf "\n\e[1;31;40mWelcome to the eXo Dependency Installer.\e[0m\n\n%s\n%s\n%s\n\n" \
        "This setup will install the software required by the collection." \
        "If system packages are needed, sudo access will be required." \
        "As such, you may be prompted for your password at various points."
    printf "Please choose one of the following:\n\n%s\e[1;37;45m%s\e[0m%s\n%s\e[1;37;45m%s\e[0m%s\n%s\e[1;37;45m%s\e[0m%s\n\n" \
        "[" "P" "]roceed with installation" "[" "D" "]ownload the latest setup" "[" "A" "]bort installation" 
    while true
    do
        read -p "(P/D/A)? " choice
        case $choice in
            [Pp]* ) break;;
            [Dd]* ) runupdate=yes
                break;;
            [Aa]* ) printf "\n"
                exit 1
                break;;
            *   ) printf "Invalid input.\n";;
        esac
    done
    
    clear
    
    for check in curl ffmpeg flatpak fold perl python3 sed sha256sum tput unzip wget zip
    do
        ! [ `which $check` ] && missingPackages=yes
    done
    if [ $missingPackages == yes ]
    then
        if [ "$distroid" == "arch" ]
        then
            goarch
        elif [ "$distroid" == "debian" ]
        then
            goapt
        elif [ "$distroid" == "fedora" ]
        then
            godnf
        elif [ "$distroid" == "linuxmint" ]
        then
            goapt
        elif [ "$distroid" == "manjaro" ]
        then
            goarch
        elif [ "$distroid" == "ubuntu" ]
        then
            goapt
        elif [ "$distrolike" == "arch" ]
        then
            goarch
        elif [ "$distrolike" == "debian" ]
        then
            goapt
        elif [ "$distrolike" == "ubuntu" ]
        then
            goapt
        else
            setupother
        fi
    else
        [ "$runupdate" == "yes" ] && goupdate
        extractPackages
        installflatpaks
    fi
    
    clear
    printf "\nAll required dependencies are now satisfied.\n%s\e[1;33;40m%s\e[0m%s\n\n" \
        "You may proceed with running " "Setup.sh" " to install the eXoDOS collection."
    read -s -n 1 -p "Press any key to exit..."
    printf "\n\n"
}

function extractPackages
{
    cd eXo
    unzip -o -q ./util/util\*_linux\*.zip EXT\*_linux\*.zip -d ./util
    [ $? != 0 ] && failedunzip
    unzip -o -q ./util/EXT\*_linux\*.zip Flatpaks/\* -d ./
    [ $? != 0 ] && failedunzip
    cd ..
}

function failedinstall
{
    printf "\n\e[1;31;47mAn error occurred while attempting to install packages.\e[0m\n\n%s\n\t%s\n\t%s\n\t%s\n\t%s\n\t%s\n\t%s\n\n" \
        "Possible causes may include:" \
        "- A lock held by automatic updates running in the background" \
        "- Insufficient sudo access or user permissions" \
        "- A problem with your package manager" \
        "- A read-only filesystem" \
        "- A zip file is corrupted" \
        "- Your computer leading a rebellion against you"
    printf "Sometimes the problem may resolve itself by rerunning this setup.\nFirst try that. If there is still a problem, consult the readme:\n%s\e[1;33;40m%s\e[0m%s\n\n" \
        "\"" "./eXoDOS Linux ReadMe.txt" "\""
    read -s -n 1 -p "Press any key to abort."
    printf "\n\n"
    exit 1
}

function failedunzip
{
    printf "\n\e[1;31;47mFailed to unzip packages.\e[0m\n\n"
    read -s -n 1 -p "Press any key to abort."
    printf "\n\n"
    exit 1
}

function goapt
{
    if [ "$runupdate" == "yes" ]
    then
        if ! [ `which apt` ]
        then
            echo "Missing apt!"
            failedinstall
        fi
        if ! [ `which wget` ]
        then
            echo "Wget is not present. Attempting to install..."
            sudo apt update
            [ $? != 0 ] && failedinstall
            sudo apt install -y wget
            [ $? != 0 ] && failedinstall
        fi
        if ! [ `which sha256sum` ]
        then
            echo "Sha256sum is not present. Attempting to install..."
            sudo apt update
            [ $? != 0 ] && failedinstall
            sudo apt install -y coreutils
            [ $? != 0 ] && failedinstall
        fi
        if ! [ `which unzip` ]
        then
            echo "Unzip is not present. Attempting to install..."
            sudo apt update
            [ $? != 0 ] && failedinstall
            sudo apt install -y unzip
            [ $? != 0 ] && failedinstall
        fi
        goupdate
        exit 1
    else
        printf "\nBeginning dependency installation...\n\nIf a system package is needed, you will be prompted for your password (sudo).\n\n"
        if ! [ `which apt` ]
        then
            echo "Missing apt!"
            failedinstall
        fi
        
        [ $? != 0 ] && failedinstall
        if ! [ `which fold` ]
        then
            sudo apt update
            sudo apt install -y coreutils
            [ $? != 0 ] && failedinstall
        fi
        if ! [ `which sha256sum` ]
        then
            sudo apt update
            sudo apt install -y coreutils
            [ $? != 0 ] && failedinstall
        fi
        if ! [ `which tput` ]
        then
            sudo apt update
            sudo apt install -y ncurses-bin
            [ $? != 0 ] && failedinstall
        fi
        for check in curl ffmpeg flatpak perl python3 sed unzip wget zip
        do
            if ! [ `which $check` ]
            then
                echo "$check is not present. Attempting to install..."
                sudo apt update
                sudo apt install -y $check
                [ $? != 0 ] && failedinstall
            fi
        done
        extractPackages
        installflatpaks
    fi
}

function goarch
{
    if [ "$runupdate" == "yes" ]
    then
        if ! [ `which pacman` ]
        then
            echo "Missing pacman!"
            failedinstall
        fi
        if ! [ `which wget` ]
        then
            echo "Wget is not present. Updating packages and attempting to install..."
            sudo pacman --noconfirm -Syu
            [ $? != 0 ] && failedinstall
            sudo pacman --noconfirm -S wget
            [ $? != 0 ] && failedinstall
            sudo pacman --noconfirm -Sy
            [ $? != 0 ] && failedinstall
        fi
        if ! [ `which sha256sum` ]
        then
            echo "Sha256sum is not present. Updating packages and attempting to install..."
            sudo pacman --noconfirm -Syu
            [ $? != 0 ] && failedinstall
            sudo pacman --noconfirm -S coreutils
            [ $? != 0 ] && failedinstall
            sudo pacman --noconfirm -Sy
            [ $? != 0 ] && failedinstall
        fi
        if ! [ `which unzip` ]
        then
            echo "Unzip is not present. Updating packages and attempting to install..."
            sudo pacman --noconfirm -Syu
            [ $? != 0 ] && failedinstall
            sudo pacman --noconfirm -S unzip
            [ $? != 0 ] && failedinstall
            sudo pacman --noconfirm -Sy
            [ $? != 0 ] && failedinstall
        fi
        goupdate
        exit 1
    else
        printf "\nBeginning dependency installation...\n\nIf a system package is needed, you will be prompted for your password (sudo).\n\n"
        if ! [ `which pacman` ]
        then
            echo "Missing pacman!"
            failedinstall
        fi
        if ! [ `which fold` ]
        then
            sudo pacman --noconfirm -Syu
            [ $? != 0 ] && failedinstall
            sudo pacman --noconfirm -S coreutils
            [ $? != 0 ] && failedinstall
            sudo pacman --noconfirm -Sy
            [ $? != 0 ] && failedinstall
        fi
        if ! [ `which sha256sum` ]
        then
            sudo pacman --noconfirm -Syu
            [ $? != 0 ] && failedinstall
            sudo pacman --noconfirm -S coreutils
            [ $? != 0 ] && failedinstall
            sudo pacman --noconfirm -Sy
            [ $? != 0 ] && failedinstall
        fi
        if ! [ `which tput` ]
        then
            sudo pacman --noconfirm -Syu
            [ $? != 0 ] && failedinstall
            sudo pacman --noconfirm -S ncurses
            [ $? != 0 ] && failedinstall
            sudo pacman --noconfirm -Sy
            [ $? != 0 ] && failedinstall
        fi
        for check in curl ffmpeg flatpak perl python3 sed unzip wget zip
        do
            if ! [ `which $check` ]
            then
                echo "$check is not present. Attempting to install..."
                sudo pacman --noconfirm -Syu
                [ $? != 0 ] && failedinstall
                sudo pacman --noconfirm -S $check
                [ $? != 0 ] && failedinstall
                sudo pacman --noconfirm -Sy
                [ $? != 0 ] && failedinstall
            fi
        done

        extractPackages
        installflatpaks
    fi
}

function godnf
{
    if [ "$runupdate" == "yes" ]
    then
        if ! [ `which dnf` ]
        then
            echo "Missing dnf!"
            failedinstall
        fi
        if ! [ `which wget` ]
        then
            echo "Wget is not present. Attempting to install..."
            sudo dnf install -y wget
            [ $? != 0 ] && failedinstall
        fi
        if ! [ `which sha256sum` ]
        then
            echo "Sha256sum is not present. Attempting to install..."
            sudo dnf install -y coreutils
            [ $? != 0 ] && failedinstall
        fi
        if ! [ `which unzip` ]
        then
            echo "Unzip is not present. Attempting to install..."
            sudo dnf install -y unzip
            [ $? != 0 ] && failedinstall
        fi
        goupdate
        exit 1
    else
        printf "\nBeginning dependency installation...\n\nIf a system package is needed, you will be prompted for your password (sudo).\n\n"
        if ! [ `which dnf` ]
        then
            echo "Missing dnf!"
            failedinstall
        fi
        if ! [ `which fold` ]
        then
            sudo dnf install -y coreutils
            [ $? != 0 ] && failedinstall
        fi
        if ! [ `which sha256sum` ]
        then
            sudo dnf install -y coreutils
            [ $? != 0 ] && failedinstall
        fi
        if ! [ `which tput` ]
        then
            sudo dnf install -y ncurses
            [ $? != 0 ] && failedinstall
        fi
        
        for check in curl ffmpeg flatpak perl python3 sed unzip wget zip
        do
            if ! [ `which $check` ]
            then
                echo "$check is not present. Attempting to install..."
                sudo dnf install -y $check
                [ $? != 0 ] && failedinstall
            fi
        done
        extractPackages
        installflatpaks
    fi
}

function goupdate
{
    clear
    printf "\nChecking for updates...\n\n"
    [ -e "ver_universal_linuxmac.txt" ] && rm ver_universal_linuxmac.txt
    [ -e "install_dependencies.cnew" ] && rm install_dependencies.cnew
    [ -e "install_dependencies.bnew" ] && rm install_dependencies.bnew
    [ -e "update_universalpackages_linuxmac.zip" ] && rm update_universalpackages_linuxmac.zip
    wget "https://github.com/exoscoriae/eXoDOS/raw/master/linux_mac/ver_universal_linuxmac.txt" -O ver_universal_linuxmac.txt
    if [ ! -e "ver_universal_linuxmac.txt" ]
    then
        printf "\n\e[1;31;47mFailed to retrieve update information.\e[0m\n\n"
        read -s -n 1 -p "Press any key to abort."
        printf "\n\n"
        exit 1
    fi
    updateversion="$(sed -n '1p' ver_universal_linuxmac.txt)"
    universal_depmac_url="$(sed -n '2p' ver_universal_linuxmac.txt)"
    universal_depmac_sum="$(sed -n '3p' ver_universal_linuxmac.txt)"
    universal_deplin_url="$(sed -n '4p' ver_universal_linuxmac.txt)"
    universal_deplin_sum="$(sed -n '5p' ver_universal_linuxmac.txt)"
    universal_package_url="$(sed -n '6p' ver_universal_linuxmac.txt)"
    universal_package_sum="$(sed -n '7p' ver_universal_linuxmac.txt)"
    rm ver_universal_linuxmac.txt
    clear
    if [ "$setupversion" == "$updateversion" ]
    then
        printf "\nYou already have the latest version of the setup.\n\n"
        read -s -n 1 -p "Press any key to close..."
        printf "\n\n"
        exit 0
    else
        printf "\n%s\e[1;37;40m%s\e[0m%s\n\n%s\t\t$setupversion\n%s\t$updateversion\n\n" \
        "An update is " "available" "." "Local version: " "Available version: "
        printf "%s\n\n%s\e[4;37;40m%s\e[0m%s\n\t%s\e[1;33;40m%s\e[0m%s\n\t%s\e[1;33;40m%s\e[0m%s\n\t%s\e[1;34;40m%s\e[0m%s\e[1;34;40m%s\e[0m%s\n\t%s\n\n" \
            "Note that proceeding will ONLY update this setup and critical dependencies." \
            "To update " "games" ", do one of the following after the packs are fully installed:" \
            "- Direct (Linux): Run " "./eXo/Update/update.command " "(eXoDOS)"\
            "- Direct (Linux): Run " "./eXo/Update/updateScummVM.command " "(eXoScummVM)"\
            "- exogui (Linux): Select the " "Check for updates" " options on the " "Home" " tab" \
            "- LaunchBox (Windows): Use normally documented method to update "
            
        read -s -n 1 -p "Press any key to continue..."
        printf "\n\n"
        wget "$universal_depmac_url" -O install_dependencies.cnew
        if [ ! -e "install_dependencies.cnew" ]
        then
            printf "\n\e[1;31;47mFailed to download dependency setup.\e[0m\n\n"
            read -s -n 1 -p "Press any key to abort."
            printf "\n\n"
            exit 1
        fi
        echo "$universal_depmac_sum" | sha256sum --check
        if [ $? != 0 ]
        then
            rm install_dependencies.cnew
            printf "\n\e[1;31;47mChecksum for downloaded file invalid.\e[0m\n\n"
            read -s -n 1 -p "Press any key to abort."
            printf "\n\n"
            exit 1
        else
            mv install_dependencies.cnew install_dependencies.command
            if [ $? != 0 ]
            then
                printf "\n\e[1;31;47mError replacing install_dependencies.command.\e[0m\n\n"
                read -s -n 1 -p "Press any key to abort."
                printf "\n\n"
                exit 1
            fi
            chmod +x install_dependencies.command
            if [ $? != 0 ]
            then
                printf "\n\e[1;31;47mError making install_dependencies.command executable.\e[0m\n\n"
                read -s -n 1 -p "Press any key to abort."
                printf "\n\n"
                exit 1
            fi
        fi
        wget "$universal_deplin_url" -O install_dependencies.bnew
        if [ ! -e "install_dependencies.bnew" ]
        then
            printf "\n\e[1;31;47mFailed to download dependency setup.\e[0m\n\n"
            read -s -n 1 -p "Press any key to abort."
            printf "\n\n"
            exit 1
        fi
        echo "$universal_deplin_sum" | sha256sum --check
        if [ $? != 0 ]
        then
            rm install_dependencies.bnew
            printf "\n\e[1;31;47mChecksum for downloaded file invalid.\e[0m\n\n"
            read -s -n 1 -p "Press any key to abort."
            printf "\n\n"
            exit 1
        else
            mv install_dependencies.bnew eXo/util/install_dependencies.bsh
            if [ $? != 0 ]
            then
                printf "\n\e[1;31;47mError replacing install_dependencies.bsh.\e[0m\n\n"
                read -s -n 1 -p "Press any key to abort."
                printf "\n\n"
                exit 1
            fi
        fi
        wget "$universal_package_url" -O update_universalpackages_linuxmac.zip
        if [ ! -e "update_universalpackages_linuxmac.zip" ]
        then
            printf "\n\e[1;31;47mFailed to download packages.\e[0m\n\n"
            read -s -n 1 -p "Press any key to abort."
            printf "\n\n"
            exit 1
        fi
        echo "$universal_package_sum" | sha256sum --check
        if [ $? != 0 ]
        then
            rm update_universalpackages_linuxmac.zip
            printf "\n\e[1;31;47mChecksum for downloaded file invalid.\e[0m\n\n"
            read -s -n 1 -p "Press any key to abort."
            printf "\n\n"
            exit 1
        fi
        unzip -o update_universalpackages_linuxmac.zip -d ./
        if [ $? != 0 ]
        then
            printf "\n\e[1;31;47mFailed to unzip update.\e[0m\n\n"
            read -s -n 1 -p "Press any key to abort."
            printf "\n\n"
            exit 1
        fi
        rm update_universalpackages_linuxmac.zip
        clear
        printf "\nUpdate completed successfully.\n\n%s\n\n" \
            "Run this setup again for new features and added package / distribution support."
        read -s -n 1 -p "Press any key to close..."
        printf "\n\n"
        exit 0
    fi
}

function installflatpaks
{
    flatpak remote-add --user --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
    [ $? != 0 ] && failedinstall
    if [ `flatpak list 2>/dev/null | grep DOSBox | wc -l` -gt 0 ]
    then
        echo "Removing deprecated eXoDOS DOSBox flatpaks."
        [[ `flatpak list 2>/dev/null | grep "com\.dosbox\.DOSBox-X"` ]] && flatpak remove -y com.dosbox.DOSBox-X 2>/dev/null
        [[ `flatpak list 2>/dev/null | grep "com\.dosbox\.DOSBox-ECE-r4358"` ]] && flatpak remove -y com.dosbox.DOSBox-ECE-r4358 2>/dev/null
        [[ `flatpak list 2>/dev/null | grep "com\.dosbox\.DOSBox-ECE-r4301"` ]] && flatpak remove -y com.dosbox.DOSBox-ECE-r4301 2>/dev/null
        [[ `flatpak list 2>/dev/null | grep "com\.dosbox\.DOSBox-ECE"` ]] && flatpak remove -y com.dosbox.DOSBox-ECE 2>/dev/null
    fi
    echo "Installing retro_exo flatpaks..."
    for pkg in ./eXo/Flatpaks/*.flatpak
    do
        flatpak update --user -y
        [ $? != 0 ] && failedinstall
        flatpak info "`basename "${pkg%.*}"`" &>/dev/null && flatpak remove -y "`basename "${pkg%.*}"`"
        flatpak install --user --reinstall -y "$pkg"
        [ $? != 0 ] && failedinstall
        #https://github.com/flatpak/flatpak/pull/5546
        #Note that --reinstall will not work until the above flatpak pull request is rolled out, work around implemented in prior line
    done
}

function setupother
{
    if [ "$runupdate" == "yes" ]
    then
        if ! [ `which wget` ]
        then
            printf "\nWget is not present. Please install it before proceeding.\n\n"
            exit 1
        fi
        if ! [ `which sha256sum` ]
        then
            printf "\nCoreutils (sha256sum) is not present. Please install it before proceeding.\n\n"
            exit 1
        fi
        if ! [ `which unzip` ]
        then
            printf "\nUnzip is not present. Please install it before proceeding.\n\n"
            exit 1
        fi
        goupdate
        exit 1
    fi
    printf "\nYour distribution, $distroid, is not officially supported.\n%s\n\n%s\n%s\n\n%s\n%s\n\n" \
        "As such, you may need to install some software manually." \
        "If a problem is encountered, you may make a support request in our Discord." \
        "If support is added, you will need to update this installer to access it." \
        "This setup will now check for any packages that need to be installed." \
        "After you have installed the required packages, rerun this setup."
    read -s -n 1 -p "Press any key to continue..."
    printf "\n\n"
    
    missingDependencies=no
    ! [ `which curl` ] && (missingDependencies=yes; printf "curl: \e[1;31;47mmissing\e[0m\n") || (printf "curl: \e[1;37;46mpresent\e[0m\n")
    ! [ `which ffmpeg` ] && (missingDependencies=yes; printf "ffmpeg: \e[1;31;47mmissing\e[0m\n") || (printf "ffmpeg: \e[1;37;46mpresent\e[0m\n")
    ! [ `which flatpak` ] && (missingDependencies=yes; printf "flatpak: \e[1;31;47mmissing\e[0m\n") || (printf "flatpak: \e[1;37;46mpresent\e[0m\n")
    ! [ `which fold` ] && (missingDependencies=yes; printf "fold: \e[1;31;47mmissing\e[0m\n") || (printf "fold: \e[1;37;46mpresent\e[0m\n")
    ! [ `which perl` ] && (missingDependencies=yes; printf "perl: \e[1;31;47mmissing\e[0m\n") || (printf "perl: \e[1;37;46mpresent\e[0m\n")
    ! [ `which python3` ] && (missingDependencies=yes; printf "python3: \e[1;31;47mmissing\e[0m\n") || (printf "python3: \e[1;37;46mpresent\e[0m\n")
    ! [ `which sed` ] && (missingDependencies=yes; printf "sed: \e[1;31;47mmissing\e[0m\n") || (printf "sed: \e[1;37;46mpresent\e[0m\n")
    ! [ `which sha256sum` ] && (missingDependencies=yes; printf "sha256sum: \e[1;31;47mmissing\e[0m\n") || (printf "sha256sum: \e[1;37;46mpresent\e[0m\n")
    ! [ `which tput` ] && (missingDependencies=yes; printf "tput: \e[1;31;47mmissing\e[0m\n") || (printf "tput: \e[1;37;46mpresent\e[0m\n")
    ! [ `which unzip` ] && (missingDependencies=yes; printf "unzip: \e[1;31;47mmissing\e[0m\n") || (printf "unzip: \e[1;37;46mpresent\e[0m\n")
    ! [ `which wget` ] && (missingDependencies=yes; printf "wget: \e[1;31;47mmissing\e[0m\n") || (printf "wget: \e[1;37;46mpresent\e[0m\n")
    ! [ `which zip` ] && (missingDependencies=yes; printf "zip: \e[1;31;47mmissing\e[0m\n") || (printf "zip: \e[1;37;46mpresent\e[0m\n")
    
    if [ $missingDependencies == "no" ]
    then
        printf "\nSystem dependencies satisfied. Proceeding to install flatpaks.\n\n"
        extractPackages
        installflatpaks
    fi
    
    if [ $missingDependencies == "yes" ]
    then
        printf "\n\e[1;31;47mNot all dependencies are satisfied.\e[0m\n\n%s\n\t%s\n\t%s\n\n" \
            "If compiling, note that all executables must:" \
            "- Be installed in a directory described by the \$PATH variable" \
            "- Have the same filenames as described by this setup"
        read -s -n 1 -p "Press any key to abort."
        printf "\n\n"
        exit 1
    fi
}

beginLinux
